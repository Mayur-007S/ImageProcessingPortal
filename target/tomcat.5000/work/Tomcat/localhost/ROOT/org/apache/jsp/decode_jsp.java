/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.52
 * Generated at: 2025-04-30 05:01:15 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class decode_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("<!DOCTYPE html>\n");
      out.write("<html lang=\"en\">\n");
      out.write("<head>\n");
      out.write("    <meta charset=\"UTF-8\">\n");
      out.write("    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n");
      out.write("    <title>Decode Hidden Data - Steganography Tool</title>\n");
      out.write("    <link rel=\"stylesheet\" href=\"css/styles.css\">\n");
      out.write("    <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css\">\n");
      out.write("</head>\n");
      out.write("<body>\n");
      out.write("    <div class=\"container\">\n");
      out.write("        <header>\n");
      out.write("            <h1>Image Steganography Decoder</h1>\n");
      out.write("            <p>Extract hidden information from images</p>\n");
      out.write("        </header>\n");
      out.write("        \n");
      out.write("        <nav class=\"main-nav\">\n");
      out.write("            <ul>\n");
      out.write("                <li><a href=\"index.jsp\"><i class=\"fas fa-home\"></i> Home</a></li>\n");
      out.write("                <li><a href=\"encode-page.jsp\"><i class=\"fas fa-lock\"></i> Encode</a></li>\n");
      out.write("                <li><a href=\"decode.jsp\" class=\"active\"><i class=\"fas fa-unlock-alt\"></i> Decode</a></li>\n");
      out.write("            </ul>\n");
      out.write("        </nav>\n");
      out.write("        \n");
      out.write("        <main>\n");
      out.write("            <section class=\"card\">\n");
      out.write("                <h2><i class=\"fas fa-unlock\"></i> Upload an Image to Decode</h2>\n");
      out.write("                <form action=\"decode\" method=\"post\" enctype=\"multipart/form-data\" id=\"decodeForm\">\n");
      out.write("                    <div class=\"form-group\">\n");
      out.write("                        <label for=\"imageToDecodeFile\">Select an image file:</label>\n");
      out.write("                        <input type=\"file\" id=\"imageToDecodeFile\" name=\"imageToDecodeFile\" accept=\"image/*\" required>\n");
      out.write("                    </div>\n");
      out.write("                    <div class=\"form-note\">\n");
      out.write("                        <p>Upload an image that contains hidden data to reveal its secrets. The decoder will attempt to extract any text, links, or file references encoded within the image.</p>\n");
      out.write("                    </div>\n");
      out.write("                    <div class=\"form-group\">\n");
      out.write("                        <button type=\"submit\" class=\"btn primary\"><i class=\"fas fa-unlock-alt\"></i> Decode Image</button>\n");
      out.write("                    </div>\n");
      out.write("                </form>\n");
      out.write("            </section>\n");
      out.write("            \n");
      out.write("            <section class=\"card info-card\">\n");
      out.write("                <h2><i class=\"fas fa-info-circle\"></i> What can be decoded?</h2>\n");
      out.write("                <div class=\"info-content\">\n");
      out.write("                    <div class=\"info-item\">\n");
      out.write("                        <h3><i class=\"fas fa-font\"></i> Text Messages</h3>\n");
      out.write("                        <p>Hidden text will be displayed directly on the result page.</p>\n");
      out.write("                    </div>\n");
      out.write("                    <div class=\"info-item\">\n");
      out.write("                        <h3><i class=\"fas fa-link\"></i> Links</h3>\n");
      out.write("                        <p>URLs will be displayed as clickable links.</p>\n");
      out.write("                    </div>\n");
      out.write("                    <div class=\"info-item\">\n");
      out.write("                        <h3><i class=\"fas fa-file\"></i> File References</h3>\n");
      out.write("                        <p>Files that were encoded into the image will show file details.</p>\n");
      out.write("                    </div>\n");
      out.write("                </div>\n");
      out.write("                <div class=\"warning\">\n");
      out.write("                    <p><i class=\"fas fa-exclamation-triangle\"></i> Note: Only images encoded with this steganography tool can be properly decoded.</p>\n");
      out.write("                </div>\n");
      out.write("                \n");
      out.write("                <div class=\"actions\">\n");
      out.write("                    <a href=\"index.jsp\" class=\"btn secondary\"><i class=\"fas fa-home\"></i> Back to Home</a>\n");
      out.write("                    <a href=\"encode-page.jsp\" class=\"btn primary\"><i class=\"fas fa-lock\"></i> Go to Encoder</a>\n");
      out.write("                </div>\n");
      out.write("            </section>\n");
      out.write("        </main>\n");
      out.write("        \n");
      out.write("        <footer>\n");
      out.write("            <p>&copy; 2023 Image Steganography Tool</p>\n");
      out.write("        </footer>\n");
      out.write("    </div>\n");
      out.write("    \n");
      out.write("    <script src=\"js/decodeScript.js\"></script>\n");
      out.write("</body>\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
